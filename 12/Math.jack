// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, mask;
        let sum = 0;
        let i = 0;
        let shiftedX = x;
        let mask = 1;
        while (i < 16) {
            // the i-th bit is set
            if ((mask & y) == mask) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let mask = mask + mask;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, _2q;
        if (Math.abs(y) > Math.abs(x)) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        let _2q = q + q;
        if (x - y * _2q < y) {
            return _2q;
        } else {
            return _2q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, p, t;
        let j = 7; // n/2 - 1
        let p = 128; // 2^j
        while (j >= 0) {
            let t = y + p;
            if (Math.multiply(t,t) <= x) {
                let y = t;
            }
            let j = j - 1;
            let p = Math.divide(p,2);
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (b > a) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        }
        return a;
    }
}
