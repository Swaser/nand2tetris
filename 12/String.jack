// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array value;
    field int maxLength;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let value = Array.new(Math.max(1,maxLength));
        let this.maxLength = Math.max(0, maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(value);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        // TODO check length
        return value[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j >= 0 && j < maxLength) {
            let value[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength) {
            let value[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        var int i;
        if (length > 0) {
            let i = length -1 ;
            let value[i] = 0; // to be sure
            let length = i;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {

        var int i, j, val;

        if (length > 0 && value[0] == 45) {
            let i = 1; // start at second char
        }
        while (i < length) {
            let j = value[i] - 48; // digits start at 48
            if (j < 10 && j >= 0) {
                let val = 10 * val + j;
            } else {
                let j = length;
            }
            let i = i + 1;
        }
        if (value[0] == 45) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

        let length = 0;
        if (val < 0) {
            do appendChar(45);
            do doSetInt(-val);
        } else {
            do doSetInt(val);
        }
        return;
    }

    method void doSetInt(int val) {

        var int d, r;
        let d = val / 10;
        let r = val - 10 * d;
        if (d > 0) {
            do doSetInt(d);
        }
        do appendChar(r + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
